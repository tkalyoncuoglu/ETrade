@model HomeIndexViewModel
@* Report -> Home controller -> Index action'ından gönderdiğimiz view model. *@
@*Model namespace using directive should be added to _ViewImports.cshtml.*@

@*
	Area'lar projenin Views klasörü altındaki _ViewImports ve _ViewStart view'larını kullanmamaktadır bu yüzden
	projenin Views klasörü altındaki _ViewImports ve _ViewStart view'ları örneğin burada olduğu gibi Areas -> Report -> Views
	altına kopyalanırsa bu area'daki view'ların bu _ViewImports ve _ViewStart view'larındaki kodları kullanmaları sağlanabilir.
*@

@{
    ViewData["Title"] = "Report";

    string recordCountMessage; // aşağıda sorgu sonucunda dönen listedeki kayıt sayısını yazdıracağımız değişken
    if (Model.Report is null || Model.Report.Count == 0) // eğer sorgu sonucunda dönen liste null veya eleman sayısı 0 ise
    {
        recordCountMessage = "No records found."; // kayıt bulunamadı atıyoruz
    }
    else // eğer sorgu sonucunda dönen liste null değil ve eleman sayısı 0'dan büyük ise
    {
        if (Model.Report.Count == 1) // eğer sorgu sonucunda dönen listedeki eleman sayısı 1 ise
        {
            recordCountMessage = "1 record found."; // 1 kayıt bulundu atıyoruz
        }
        else // eğer sorgu sonucunda dönen listedeki eleman sayısı 1'den büyük ise
        {
            recordCountMessage = $"{Model.Report.Count} records found."; // eleman sayısı kayıt bulundu atıyoruz
        }
    }
}

<h1>@ViewData["Title"]</h1>
<hr />

<!--
    Sunucuya aşağıdaki kriterler üzerinden veri göndereceğimizden ya sadece filtre input elemanlarını bir form tag'i içerisine almalıyız
    ya da daha kolaylık olsun diye aşağıdaki tüm kısmı form tag'i içerisine alabiliriz.
-->
<form asp-action="Index" autocomplete="off">

    <!-- Arama Kriterleri -->
    <div class="row">
        <div class="col-2">
            @await Component.InvokeAsync("Categories")
        </div>
        <div class="col-10">
            <h5>Products</h5>
            <hr />
            <div class="row">

                <!--
                    view component'ta kategorileri doldurup tıklandığında kategoriye göre filtreleme yaptığımız için
                    aşağıdaki kategori drop down list'e gerek yok, sadece filtrelemede drop down list kullanımına örnek için yazdık
                -->
                <div class="col-2">
                    <label asp-for="Filter.CategoryId"></label>
                </div>
                <div class="col-4">
                    <select asp-for="Filter.CategoryId" asp-items="Model.Categories" class="form-select select2">
                        <option value="">-- All Categories --</option>
                    </select>
                </div>

                <div class="col-2">
                    <label asp-for="Filter.StoreIds"></label>
                </div>
                <div class="col-4">
                    <select multiple asp-for="Filter.StoreIds" asp-items="Model.Stores" class="form-select select2"></select>
                </div>
            </div>
            <div class="row pt-3">
                <div class="col-2">
                    <label asp-for="Filter.UnitPriceBegin"></label>
                </div>
                <div class="col-4">

                    <!--
                        eğer input'lar tek satırda bir ayraç (örneğin -) ile gruplanmak isteniyorsa Bootstrap 5 input-group
                        class'lı bir div içerisine konarak ayraç için de input-group-text class'lı bir span kullanılmalıdır
                    -->
                    <div class="input-group">
                        <input asp-for="Filter.UnitPriceBegin" class="form-control" />
                        <span class="input-group-text">-</span>
                        <input asp-for="Filter.UnitPriceEnd" class="form-control" />
                    </div>

                </div>
                <div class="col-2">
                    <label asp-for="Filter.StockAmountBegin"></label>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input asp-for="Filter.StockAmountBegin" class="form-control" />
                        <span class="input-group-text">-</span>
                        <input asp-for="Filter.StockAmountEnd" class="form-control" />
                    </div>
                </div>
            </div>
            <div class="row pt-3">
                <div class="col-2">
                    <label asp-for="Filter.ProductName"></label>
                </div>
                <div class="col-4">
                    <input asp-for="Filter.ProductName" class="form-control" />
                </div>
                <div class="col-2">
                    <label asp-for="Filter.ExpirationDateBegin"></label>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input asp-for="Filter.ExpirationDateBegin" type="text" class="form-control datetimepicker" />
                        <span class="input-group-text">-</span>
                        <input asp-for="Filter.ExpirationDateEnd" type="text" class="form-control datetimepicker" />
                    </div>
                </div>
            </div>
            <div class="row pt-3">
                <div class="offset-2 col-10">
                    <button type="submit" class="btn btn-primary"><i class="bi bi-search"></i> Search</button>
                    &nbsp;&nbsp;&nbsp;

                    <a asp-action="Index" class="btn btn-outline-primary"><i class="bi bi-arrow-clockwise"></i> Clear</a>
                    <!--
                        filtre verilerini temizlemek ve sorgu sonucunu sıfırlamak için Index action'ına yönlendiriyoruz ki
                        boş bir view model üzerinden view tekrar action'dan dönülerek filtre alanları temizlenmiş
                        ve rapor sonucu sıfırlanmış olsun
                    -->

                </div>
            </div>
        </div>
    </div>
    <hr />



    <!-- Rapor -->
    <div class="row">
        <div class="col-12">
            @if (Model.Report is not null && Model.Report.Count > 0) @* Eğer view modeldeki Report listesi null değil ve içerisinde eleman varsa table'ı yazdır *@
            {
                <p class="text-success">@recordCountMessage</p><!-- yukarıda atadığımız recordCountMessage değişkenini yeşil renkte yazdırıyoruz -->

                <div style="overflow-y:auto; height:288px; border-style:solid; border-width:1px;">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    @Html.DisplayNameFor(model => model.Report.FirstOrDefault().StoreName)
                                    @*
                                view modeldeki Report bir IEnumerable değil de List olduğu için ReportItemModel özelliklerindeki
                                DisplayName'leri kullanabilmek için listedeki herhangi bir elemana ki ilkine ulaşmak daha uygun
                                ulaşıp özellik ismini yazıyoruz
                                *@
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Report.FirstOrDefault().CategoryName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Report.FirstOrDefault().ProductName)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Report.FirstOrDefault().UnitPrice)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Report.FirstOrDefault().StockAmount)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.Report.FirstOrDefault().ExpirationDate)
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Report) // view model'deki Report listesindeki her bir elemanı turluyoruz
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.StoreName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.CategoryName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ProductName)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.UnitPrice)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.StockAmount)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.ExpirationDate)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else @* Eğer view modeldeki Report listesi null veya içerisinde eleman yoksa kayıt bulunamadı yazdırıyoruz *@
            {
                <p class="text-danger">@recordCountMessage</p><!-- yukarıda atadığımız recordCountMessage değişkenini kırmızı renkte yazdırıyoruz -->
            }
        </div>
    </div>

</form>

@section Scripts {
    @* 
        https://xdsoft.net/jqplugins/datetimepicker 
        Bu third party kütüphaneyi wwwroot -> lib seçip sağ tıklayıp Add -> Client-Side Library dediğimizde cdnjs, jsdelivr veya unpkg 
        provider'ları (kütüphane sağlayıcıları) üzerinden bulamazsak yukarıdaki URL'den indirip ihtiyacımız olan css ve js 
        dosyalarını wwwroot -> plugins -> datetimepicker klasörüne kopyaladıktan sonra bir aşağıdaki şekilde dosya referanslarını ekliyoruz 
        ve jQuery ile datetimepicker class'lı text box'ları bu kütüphane üzerinden takvim'e dönüştürüyoruz.
    *@
    <link rel="stylesheet" href="/plugins/datetimepicker/jquery.datetimepicker.min.css" />
    <script src="/plugins/datetimepicker/jquery.datetimepicker.full.min.js"></script>

    <link rel="stylesheet" href="/lib/select2/css/select2.min.css" />
    <script src="/lib/select2/js/select2.min.js"></script>

    <script>
        $(function () {
            // Türkçe tarih ve saat ile datetimepicker kullanım örneği:
            //$.datetimepicker.setLocale("tr");
            //$('.datetimepicker').datetimepicker({
            //    timepicker: true,
            //    format: 'd.m.Y H:i',
            //    i18n: {
            //        tr: {
            //            months: [
            //                'Ocak', 'Şubat', 'Mart', 'Nisan',
            //                'Mayıs', 'Haziran', 'Temmuz', 'Ağustos',
            //                'Eylül', 'Ekim', 'Kasım', 'Aralık'
            //            ],
            //            dayOfWeek: [
            //                "Paz", "Pzt", "Sal", "Çar",
            //                "Per", "Cum", "Cmt"
            //            ]
            //        }
            //    }
            //});
            // Projemiz için sadece tarih ile datetimepicker kullanım örneği:
            $('.datetimepicker').datetimepicker({
                timepicker: false,
                format: 'm/d/Y'
            });

            $(".select2").select2();
        });
    </script>
}